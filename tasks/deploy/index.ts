import { task } from "hardhat/config";
import { TaskArguments } from "hardhat/types";

import {
  OrigamiMembershipToken,
  OrigamiMembershipTokenFactory,
  OrigamiMembershipTokenFactory__factory,
  OrigamiMembershipToken__factory,
} from "../../src/types";

const timeStamp = (): string => {
  const time: Date = new Date();
  return `${time.toLocaleTimeString()}`;
};

const verboseLog = (args: TaskArguments, ...logArgs: (string | object)[]) => {
  const verbose: boolean = args.verboseOutput;
  if (verbose) {
    console.log(timeStamp(), ...logArgs);
  }
};

task("deploy:membership-token", "Deploys the OrigamiMembershipToken contract")
  .addFlag("verboseOutput", "Adds verbose output to the deploy task")
  .addParam("admin", "address of the admin for the OrigamiMembershipToken generated by the factory")
  .addParam("name", "name for the OrigamiMembershipToken generated by the factory")
  .addParam("symbol", "symbol for the OrigamiMembershipToken generated by the factory")
  .addParam("baseUri", "baseURI for the OrigamiMembershipToken generated by the factory")
  .setAction(async (args: TaskArguments, { ethers, network, upgrades }) => {
    console.log(timeStamp(), `Deploying OrigamiMembershipToken on ${network.name}`);

    const OMT__factory = await ethers.getContractFactory("OrigamiMembershipToken");
    verboseLog(args, "OrigamiMembershipToken instantiated");
    const OMT: OrigamiMembershipToken = <OrigamiMembershipToken>(
      await upgrades.deployProxy(OMT__factory, [args.admin, args.name, args.symbol, args.baseUri])
    );
    verboseLog(args, "OrigamiMembershipToken deploy initiated");
    await OMT.deployed();

    verboseLog(args, "OrigamiMembershipToken deploy completed");
    verboseLog(args, "OrigamiMembershipToken transaction", OMT.deployTransaction.hash);
    verboseLog(
      args,
      "OrigamiMembershipToken transaction receipt",
      await (
        await ethers.provider.getTransactionReceipt(OMT.deployTransaction.hash)
      ).transactionHash,
    );
    console.log(timeStamp(), `OrigamiMembershipToken deployed at ${OMT.address}`);

    if (!["hardhat", "localhost"].includes(network.name)) {
      console.log(timeStamp(), "Waiting for >= 5 OrigamiMembershipToken deployment confirmations");
      await OMT.deployTransaction.wait(5);
    }
    console.log(timeStamp(), "Finished deploy!");
    console.log(
      `\nWhen ready, verify with: \n\nyarn hardhat post-verify --network ${network.name} --contract-address ${OMT.address}`,
    );
  });

task("upgrade:membership-token", "Upgrades the OrigamiMembershipToken contract")
  .addParam("proxyAddress", "address of the OrigamiMembershipToken proxy")
  .setAction(async (args: TaskArguments, { ethers, network, upgrades }) => {
    console.log(timeStamp(), `Upgrading OrigamiMembershipToken on ${network.name}`);
    const OMT__factory = await ethers.getContractFactory("OrigamiMembershipToken");
    const OMT = await upgrades.upgradeProxy(args.proxyAddress, OMT__factory);
    console.log(timeStamp(), `OrigamiMembershipToken upgraded at ${OMT.address}`);
  });

task("deploy:membership-token-factory", "Deploys the OrigamiMembershipToken(Factory) contract")
  .addFlag("verboseOutput", "Adds verbose output to the deploy task")
  .setAction(async (args: TaskArguments, { ethers, network, upgrades }) => {
    console.log(timeStamp(), `Deploying OrigamiMembershipToken(Factory) on ${network}`);

    const OMTF__factory = await ethers.getContractFactory("OrigamiMembershipTokenFactory");
    verboseLog(args, "OrigamiMembershipTokenFactory instantiated");
    const OMTF: OrigamiMembershipTokenFactory = <OrigamiMembershipTokenFactory>(
      await upgrades.deployProxy(OMTF__factory, [])
    );
    verboseLog(args, "OrigamiMembershipTokenFactory deploy initiated");
    await OMTF.deployed();
    verboseLog(args, "OrigamiMembershipTokenFactory deploy completed");
    verboseLog(args, "OrigamiMembershipTokenFactory transaction", OMTF.deployTransaction.hash);
    verboseLog(
      args,
      "OrigamiMembershipTokenFactory transaction receipt",
      await (
        await ethers.provider.getTransactionReceipt(OMTF.deployTransaction.hash)
      ).transactionHash,
    );
    console.log(timeStamp(), `OrigamiMembershipTokenFactory deployed at ${OMTF.address}`);

    if (!["hardhat", "localhost"].includes(network.name)) {
      console.log(timeStamp(), "Waiting for >= 5 OrigamiMembershipTokenFactory deployment confirmations");
      await OMTF.deployTransaction.wait(5);
    }
    console.log(timeStamp(), "Finished deploy!");
    console.log(
      `When ready, verify with: \n\nyarn hardhat post-verify --network ${network.name} --contract-address ${OMTF.address}`,
    );
  });

task("post-verify")
  .addParam("contractAddress", "string")
  .setAction(async (args: TaskArguments, { network, run }) => {
    if (!["hardhat", "localhost"].includes(network.name)) {
      console.log("Verifying contract on Polygonscan...");
      await run("verify:verify", { address: args.contractAddress, constructorArguments: [] });
    }
  });
